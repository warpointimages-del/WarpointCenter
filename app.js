import { loadScheduleData, saveUserData, loadUserData } from './firebase.js';

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const APP_SCRIPT_URL = 'https://script.google.com/macros/s/AKfycbzTezvV4Wa9L3zGy5qMilIVvFQRWH0h4YPiyUyJm_wI7_SSlgFZYcdhPYMCMUqWZkuNPw/exec';

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
const tg = window.Telegram.WebApp;
let currentUser = null;
let scheduleData = null;
let userData = null;

// –≠–ª–µ–º–µ–Ω—Ç—ã DOM
const userName = document.getElementById('user-name');
const monthSelector = document.getElementById('month-selector');
const refreshBtn = document.getElementById('refresh-btn');
const forceUpdateBtn = document.getElementById('force-update-btn');
const calendarGrid = document.getElementById('calendar-grid');
const loading = document.getElementById('loading');
const todayDate = document.getElementById('today-date');
const todayEmployee = document.getElementById('today-employee');
const todayStatus = document.getElementById('today-status');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
document.addEventListener('DOMContentLoaded', async function() {
    if (tg) {
        tg.expand();
        tg.ready();
        tg.enableClosingConfirmation();
    }
    await initApp();
});

// –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
async function initApp() {
    // –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram
    if (tg?.initDataUnsafe?.user) {
        currentUser = tg.initDataUnsafe.user;
        localStorage.setItem('tg_user_data', JSON.stringify(currentUser));
    } else {
        const savedUser = localStorage.getItem('tg_user_data');
        if (savedUser) currentUser = JSON.parse(savedUser);
    }

    if (!currentUser) {
        showErrorMessage('–û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ Telegram');
        return;
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    userName.textContent = `${currentUser.first_name}${currentUser.last_name ? ' ' + currentUser.last_name : ''}`;
    
    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
    const today = new Date();
    const currentMonth = `${today.getFullYear()}-${(today.getMonth() + 1).toString().padStart(2, '0')}`;
    monthSelector.value = currentMonth;

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    setupEventListeners();

    // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    await loadData();
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
function setupEventListeners() {
    refreshBtn.addEventListener('click', () => loadData());
    forceUpdateBtn.addEventListener('click', () => forceUpdate());
    monthSelector.addEventListener('change', () => renderCalendar());
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
async function loadData() {
    showLoading(true);
    
    try {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Firebase
        scheduleData = await loadScheduleData();
        
        if (!scheduleData) {
            showErrorMessage('–î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å.');
            return;
        }

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        userData = await loadUserData(currentUser.id) || {};
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        renderCalendar();
        updateTodayInfo();
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:', error);
        showErrorMessage('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: ' + error.message);
    } finally {
        showLoading(false);
    }
}

// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
async function forceUpdate() {
    showLoading(true);
    
    try {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ Google Script
        const response = await fetch(`${APP_SCRIPT_URL}?action=forceUpdate&telegramId=${currentUser.id}`);
        const result = await response.json();
        
        if (result.success) {
            // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            await loadData();
            alert('‚úÖ –î–∞–Ω–Ω—ã–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã!');
        } else {
            throw new Error(result.error || '–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏');
        }
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', error);
        alert('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: ' + error.message);
    } finally {
        showLoading(false);
    }
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
function renderCalendar() {
    if (!scheduleData?.shifts) return;
    
    const selectedMonth = monthSelector.value;
    const [year, month] = selectedMonth.split('-').map(Number);
    
    // –§–∏–ª—å—Ç—Ä—É–µ–º —Å–º–µ–Ω—ã –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –º–µ—Å—è—Ü—É
    const monthShifts = scheduleData.shifts.filter(shift => {
        if (!shift.date) return false;
        const shiftDate = new Date(shift.date);
        return shiftDate.getFullYear() === year && 
               shiftDate.getMonth() + 1 === month;
    });
    
    // –û—á–∏—â–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å
    calendarGrid.innerHTML = '';
    
    // –ü–µ—Ä–≤—ã–π –¥–µ–Ω—å –º–µ—Å—è—Ü–∞
    const firstDay = new Date(year, month - 1, 1);
    const startDay = firstDay.getDay() === 0 ? 6 : firstDay.getDay() - 1;
    
    // –ü—É—Å—Ç—ã–µ —è—á–µ–π–∫–∏ –ø–µ—Ä–µ–¥ –ø–µ—Ä–≤—ã–º –¥–Ω–µ–º
    for (let i = 0; i < startDay; i++) {
        const emptyDay = document.createElement('div');
        emptyDay.className = 'calendar-day empty';
        calendarGrid.appendChild(emptyDay);
    }
    
    // –î–Ω–∏ –º–µ—Å—è—Ü–∞
    const daysInMonth = new Date(year, month, 0).getDate();
    const today = new Date();
    
    for (let day = 1; day <= daysInMonth; day++) {
        const dayElement = document.createElement('div');
        const dateStr = `${year}-${month.toString().padStart(2, '0')}-${day.toString().padStart(2, '0')}`;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–µ–≥–æ–¥–Ω—è –ª–∏ —ç—Ç–æ
        if (today.getDate() === day && 
            today.getMonth() + 1 === month && 
            today.getFullYear() === year) {
            dayElement.classList.add('today');
        }
        
        dayElement.className = 'calendar-day';
        
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä –¥–Ω—è
        const dayNumber = document.createElement('div');
        dayNumber.className = 'day-number';
        dayNumber.textContent = day;
        dayElement.appendChild(dayNumber);
        
        // –°–º–µ–Ω—ã –¥–ª—è —ç—Ç–æ–≥–æ –¥–Ω—è
        const dayShifts = monthShifts.filter(s => s.date === dateStr);
        
        if (dayShifts.length > 0) {
            const shiftsContainer = document.createElement('div');
            shiftsContainer.className = 'shifts-container';
            
            dayShifts.forEach(shift => {
                const shiftItem = document.createElement('div');
                shiftItem.className = `shift-item shift-${getShiftTypeClass(shift.hours)}`;
                
                const hoursSpan = document.createElement('span');
                hoursSpan.className = 'shift-hours';
                hoursSpan.textContent = `${shift.hours}—á`;
                
                const shiftText = document.createTextNode(' –°–º–µ–Ω–∞');
                
                shiftItem.appendChild(hoursSpan);
                shiftItem.appendChild(shiftText);
                shiftsContainer.appendChild(shiftItem);
            });
            
            dayElement.appendChild(shiftsContainer);
        }
        
        calendarGrid.appendChild(dayElement);
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
function updateTodayInfo() {
    const today = new Date();
    const todayStr = today.toISOString().split('T')[0];
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞—Ç—É
    const options = { day: 'numeric', month: 'long', year: 'numeric' };
    todayDate.textContent = today.toLocaleDateString('ru-RU', options);
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–º—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
    todayEmployee.textContent = `${currentUser.first_name}${currentUser.last_name ? ' ' + currentUser.last_name : ''}`;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Å–º–µ–Ω–∞ —Å–µ–≥–æ–¥–Ω—è
    const todayShifts = scheduleData?.shifts?.filter(shift => shift.date === todayStr) || [];
    
    if (todayShifts.length > 0) {
        const todayShift = todayShifts[0];
        todayStatus.textContent = `–ï—Å—Ç—å —Å–º–µ–Ω–∞: ${todayShift.hours} —á–∞—Å–æ–≤ (${todayShift.type || '—Å–º–µ–Ω–∞'})`;
        todayStatus.className = 'has-shift';
    } else {
        todayStatus.textContent = '–°–µ–≥–æ–¥–Ω—è —Å–º–µ–Ω—ã –Ω–µ—Ç';
        todayStatus.className = 'no-shift';
    }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª–∞—Å—Å–∞ —Ç–∏–ø–∞ —Å–º–µ–Ω—ã
function getShiftTypeClass(hours) {
    if (hours <= 4) return 'short';
    if (hours <= 8) return 'day';
    if (hours <= 11) return 'full';
    if (hours === 12) return 'extended';
    if (hours > 12) return 'long';
    return 'full';
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function showLoading(show) {
    loading.classList.toggle('hidden', !show);
}

function showErrorMessage(message) {
    const container = document.querySelector('.container');
    container.innerHTML = `
        <div class="error-message">
            <h2>üòï ${message}</h2>
            <button onclick="location.reload()">üîÑ –û–±–Ω–æ–≤–∏—Ç—å</button>
        </div>
    `;
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø—Ä–∏–º–µ—Ä)
async function saveUserSettings(settings) {
    try {
        await saveUserData(currentUser.id, {
            ...userData,
            settings: settings,
            lastUpdated: new Date().toISOString()
        });
        return true;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
        return false;
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫
window.forceUpdate = forceUpdate;
